# migrations
# ${GREENLIGHT_DB_DSN} use env variables

migrate-up:
	@migrate -path=./migrations -database=postgres://name:password@localhost/greenlight?sslmode=disable up

migrate-down:
	@migrate -path=./migrations -database=postgres://name:password@localhost/greenlight?sslmode=disable down $(n)

migration:
@echo 'Creating migration files for ${name}...'
migrate create -seq -ext=.sql -dir=./migrations ${name}

run:
	@go run ./cmd/api

# confirm
confirm:
	@echo 'Are you sure? [y/N]' && read ans && [ $${ans:-N} = y ]

# Audit
audit:
	@echo 'Tidying and verifying module dependencies...' go mod tidy
	@go mod verify
	@echo 'Formatting code...'
	@go fmt ./...
	@echo 'Vetting code...'
	@go vet ./...
	@staticcheck ./...
	@echo 'Running tests...'
	@go test -race -vet=off ./...


# Vendoring dependencies in this way basically stores a complete
# copy of the source code for third-party packages in a vendor folder in your project.
vendor:
	@echo 'Tidying and verifying module dependencies...'
	@go mod tidy
	@go mod verify
	@echo 'Vendoring dependencies...'
	@go mod vendor

#Build
build/api:
	@echo 'Building...'
	@go build -o=./bin/api ./cmd/api

build/api short:
	@echo 'Building short binary...'
	@go build -ldflags='-s' -o=./bin/api ./cmd/api
